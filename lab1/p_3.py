def simple_iteration(A, b, eps):
    n = len(A)
    x = [0.0] * n  # начальное приближение
    x_new = [0.0] * n
    k = 0
    while True: #начинаем бесконечный цикл, который будет продолжаться до тех пор, пока не будет достигнута заданная точность решения.
        k += 1
        for i in range(0, n): 
            s = 0 #инициализируем переменную s нулем, которая будет использоваться для хранения суммы произведений коэффициентов и значений неизвестных в текущем уравнении.
            for j in range(0, n):
                if i != j: # если j-ое значение неизвестной не совпадает с i-ым, то добавляем к s произведение соответствующих коэффициентов A[i][j] и x[j].
                    s += A[i][j] * x[j] 
            x_new[i] = (b[i] - s) / A[i][i] #вычисляем новое приближение для i-ой неизвестной, используя найденную сумму и коэффициент A[i][i].

        norm = 0
        for i in range(0, n):
            norm += abs(x_new[i] - x[i]) #добавляем к norm абсолютное значение разности между i-ым элементом нового приближения и текущим приближением.

        if norm < eps:
            break

        x = x_new.copy()

    return x_new, k

def gauss_seidel(A, b, eps):
    n = len(A)
    x = [0.0] * n  # начальное приближение
    x_new = [0.0] * n
    k1 = 0
    while True:
        k1 += 1      
        for i in range(0, n):
            s1 = sum(A[i][j] * x_new[j] for j in range(i)) #вычисление суммы произведений коэффициентов матрицы A и новых значений вектора-приближения, для j от 0 до i.
            s2 = sum(A[i][j] * x[j] for j in range(i + 1, n)) #вычисление суммы произведений коэффициентов матрицы A и предыдущих значений вектора-приближения, для j от i+1 до n-1.
            x_new[i] = (b[i] - s1 - s2) / A[i][i] #вычисление нового значения i-й компоненты вектора-приближения с помощью формулы Гаусса-Зейделя.

        norm = 0
        for i in range(0, n):
            norm += abs(x_new[i] - x[i])

        if norm < eps:
            break

        x = x_new.copy()

    return x_new, k1

A = [[-14, 6, 1, -5], [-6, 27, 7, -6], [7, -5, -23, -8] ,[3, -8, -7, 26]]
b = [95, -41, 69, 27]
eps = 0.2


x, k = simple_iteration(A, b, eps)
print("Метод простых итераций:")
print("x =", [round(num, 4) for num in x])
print("Количество итераций:", k)

x, k1 = gauss_seidel(A, b, eps)
print("Метод Зейделя:")
print("x =", [round(num, 4) for num in x])
print("Количество итераций:", k1)     
